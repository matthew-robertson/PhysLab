package utils.graphing;


public class Boundary 
{
    private final Point[] points; // Points making up the boundary
    
    public Boundary()
    {
    	points = new Point[4];
    }
    
    public Boundary(int size)
    {
    	points = new Point[size];
    }
    
    /**
     * Assumes the rectangle starts out being "flat" and has 4 points.
     * Also assumes points are given in a clockwise order around the rectangle.
     * @param points
     */
    public Boundary(Point[] points)
    {
    	this.points = points;
    	calculateClickZones();
    }

    public void calculateClickZones()
    {
    	double width = points[1].getX() - points[0].getX();
    	double height = points[3].getY() - points[0].getY();
    	
    	
    	
    }
    		
    
    /**
     * Return true if the given point is contained inside the boundary.
     * See: http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html
     * @param test The point to check
     * @return true if the point is inside the boundary, false otherwise
     *
     */
    public boolean contains(Point test) 
    {
    	int i;
    	int j;
    	boolean result = false;
    	for (i = 0, j = points.length - 1; i < points.length; j = i++) 
    	{
    		if ((points[i].y > test.y) != (points[j].y > test.y) &&
    			(test.x < (points[j].x - points[i].x) * (test.y - points[i].y) / (points[j].y-points[i].y) + points[i].x)) {
    			result = !result;
    		}
    	}
    	return result;
    }
    
    public boolean contains(double x, double y) 
    {
    	int i;
    	int j;
    	boolean result = false;
    	for (i = 0, j = points.length - 1; i < points.length; j = i++) 
    	{
    		if ((points[i].y > y) != (points[j].y > y) &&
    			(x < (points[j].x - points[i].x) * (y - points[i].y) / (points[j].y-points[i].y) + points[i].x)) {
    			result = !result;
    		}
    	}
    	return result;
    }
}