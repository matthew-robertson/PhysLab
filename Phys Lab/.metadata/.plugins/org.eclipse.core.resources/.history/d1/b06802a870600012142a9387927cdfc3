package utils.file;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import project.Project;
import utils.graphing.Point;
import android.content.Context;
import android.os.Environment;

public class FileUtils 
{
	/**
	 * Checks if external storage is available for read and write 
	 */
	public boolean isExternalStorageWritable() 
	{
	    String state = Environment.getExternalStorageState();
	    if (Environment.MEDIA_MOUNTED.equals(state))
	    {
	        return true;
	    }
	    return false;
	}
	
	public void deleteFile(Context context, boolean internallyStored, String projectName)
	{
		if(internallyStored)
		{
			//context.getFilesDir() + "/" +
			String fileName = projectName + ".physdat";
			File file = new File(context.getFilesDir() + "/" + fileName);
			if(file.exists()) 
				file.delete();
		    
		}
		else
		{
			//context.getExternalFilesDir(null) + "/" + 
			String fileName = projectName + ".physdat";
			File file = new File(context.getExternalFilesDir(null) + "/" + fileName);
			if(file.exists()) 
				file.delete();
		}
	}
	
	public String save(Context context, boolean saveInternally, Project project)
	{
		try
		{
			boolean externalAvailable = isExternalStorageWritable();
			
			WritableProject proj = project.getAsWritable();
			
			if(!saveInternally && !externalAvailable)
			{
				return "ERROR: External Disk not writable";
			}
			else if(!saveInternally && externalAvailable)
			{
				saveFileExternally(context, proj);
			}
			else if(saveInternally)
			{
				saveFileInternally(context, proj);
			}
		}
		catch(Exception e) //Something's gone wrong. return appropriate error message.
		{
			e.printStackTrace();
			return "ERROR: " + e.toString();
		}
		return "ERROR: Unknown write error";
	}
	
	private void saveFileInternally(Context context, WritableProject project) 
			throws IOException
	{//context.getExternalFilesDir(null) + "/" +
		String fileName = project.projectName + ".physdat";

		System.out.println("file-name=" + fileName);
		
		FileOutputStream fileWriter = context.openFileOutput(fileName, Context.MODE_PRIVATE);
		ObjectOutputStream os = new ObjectOutputStream(fileWriter);
		os.writeObject(project);
		fileWriter.flush();
		os.flush();
		os.close();
		
		//fileWriter.close();   
		
	}
	
	private void saveFileExternally(Context context, WritableProject project) 
			throws FileNotFoundException, IOException
	{//context.getExternalFilesDir(null) + "/" +
		String fileName =  project.projectName + ".physdat";

		FileOutputStream fileWriter = context.openFileOutput(fileName, Context.MODE_PRIVATE);
		ObjectOutputStream os = new ObjectOutputStream(fileWriter);
		os.writeObject(project);
		os.flush();
		os.close();
		
		//fileWriter.close();   
		
	}

	//Probably the wrong place to put this
	private Object loadFile(Context context, boolean internallyStored, String projectName) 
			throws IOException, ClassNotFoundException
	{
		if(internallyStored)
		{
			//context.getFilesDir() + "/" +
			String fileName = projectName + ".physdat";
			
			FileInputStream fis = context.openFileInput(fileName);
			ObjectInputStream is = new ObjectInputStream(fis);
			WritableProject proj = (WritableProject)is.readObject(); //Load the object
		    
			is.close();
			return proj;
		}
		else
		{
			//context.getExternalFilesDir(null) + "/" + 
			String fileName = projectName + ".physdat";
			FileInputStream fis = context.openFileInput(fileName);
			ObjectInputStream is = new ObjectInputStream(fis);
			WritableProject proj = (WritableProject)is.readObject(); //Load the object
		    is.close();
			return proj;
		}
	}
	
	public WritableProject loadWritable(Context context, String path, boolean internallyStored)
	{
		try 
		{
			WritableProject project = (WritableProject)loadFile(context, internallyStored, path);
			return project;
		}
		catch (IOException e) 
		{
			e.printStackTrace();
		}
		catch (ClassNotFoundException e) 
		{
			e.printStackTrace();
		}
		return null;
	}
	
	public String exportDataAsTxt(Context context, Project project)
	{
		try
		{
			BufferedWriter writer = null;
			
			String returnMessage = "Success";
			
			
			
			if(isExternalStorageWritable())
			{
				File dir = new File(Environment.getExternalStorageDirectory() + "/Phys Lab Exports/");
				if(!dir.exists())
					dir.mkdir();
				File file = new File(Environment.getExternalStorageDirectory() + "/Phys Lab Exports/" + project.projectName +"_export.txt");
				writer = new BufferedWriter(new FileWriter(file));
				returnMessage += " writing to external storage";
			}
			else
			{
				File dir = new File(context.getFilesDir() + "/Phys Lab Exports/");
				if(!dir.exists())
					dir.mkdir();
				File file = new File(context.getFilesDir() + "/Phys Lab Exports");
				writer = new BufferedWriter(new FileWriter(file));
				returnMessage += " writing to internal storage";
			}			
			
			writer.write("X Values \n \n");
			Point[] points = project.getPointsAsArray();
			
			for(int i = 0; i < points.length; i++)
			{
				writer.write(points[i].x + "\n");
			}
			writer.write("\n Y Values \n \n");
			
			for(int i = 0; i < points.length; i++)
			{
				writer.write(points[i].y + "\n");
			}
			writer.write("\n Time Values \n \n");
			
			for(int i = 0; i < points.length; i++)
			{
				writer.write(points[i].timeStamp + "\n");
			}
			
			return returnMessage;
		}
		catch (IOException e)
		{
			e.printStackTrace();
			return e.toString();
		}
	}
	
}
