package project;

import gui.activities.R;

import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;

import utils.action.StackAction;
import utils.graphing.Boundary;
import utils.graphing.GraphUtils;
import utils.graphing.GraphableObjectContainer;
import utils.graphing.Point;
import android.content.Context;
import android.content.SharedPreferences;
import android.os.Environment;
import android.preference.PreferenceManager;

public class Project
		implements Serializable
{
	private static final long serialVersionUID = 1L;
	public OptionsObject options;
	public GraphableObjectContainer graphable;
	public StackAction actionStack;
	public static final int ACTION_QUEUE_SIZE = 20;
	public String projectName;
	private final static String EXTERNAL_BASE_PATH = "/Phys Lab";
	private static final String VERSION_CREATED = "Beta 1.2";
	public double width;
	public double height;
	public Point origin;
	public Boundary videoBounds;
	public Boundary scaleBoundary;
	public String scaleTextValue = "";
	public String videoPath = "";
	public boolean preferenceSaveInternally;
	public int preferenceDistanceMeasure;
	
	public Project(Context context)
	{
		actionStack = new StackAction(ACTION_QUEUE_SIZE);
		options = new OptionsObject();
		graphable = new GraphableObjectContainer();
		projectName = "New Project";
		PreferenceManager.setDefaultValues(context, R.xml.preferences_menu, false);
		width = 0;
		height = 0;
		origin = null;
		preferenceDistanceMeasure = 1;
		preferenceSaveInternally = true;
		//setPreferences(context);
    }
	
	public Project(Context context, OptionsObject options, GraphableObjectContainer graphable, String projectName)
	{
		this.actionStack = new StackAction(ACTION_QUEUE_SIZE);
		this.options = options;
		this.graphable = graphable;
		this.projectName = projectName;
		PreferenceManager.setDefaultValues(context, R.xml.preferences_menu, false);
		width = 0;
		height = 0;
		origin = null;
		preferenceDistanceMeasure = 1;
		preferenceSaveInternally = true;
		//setPreferences(context);
	}
		
	public void updateGraphable(Context context, double scaleMeasure)
	{
		GraphUtils utils = new GraphUtils();
		Point[] points = options.getPointsAsArray();
		graphable = utils.convertRawDataToGraphable(points, context, scaleMeasure);
	}
	
	public StackAction getActionStack()
	{
		return actionStack;
	}
	
	public String getProjectName()
	{
		return projectName;
	}
	
	public void setProjectName(String str)
	{
		this.projectName = str;
	}
	
	public GraphableObjectContainer getGraphable()
	{
		return graphable;
	}
	
	public Project setGraphable(GraphableObjectContainer graphable)
	{
		this.graphable = graphable;
		return this;
	}
	
	public OptionsObject getOptions()
	{
		return options;
	}	

	public Project setOptions(OptionsObject options)
	{
		this.options = options;
		return this;
	}
	
	
	public void setDimensions(double width, double height)
	{
		verifyDimensionsMatch(this.width, this.height, width, height);
		this.width = width;
		this.height = height;
	}
	
	/**
	 * @untested verify this works.
	 * Untested Method. Should adjust the scale, and origin in a saved project. Also the points.
	 * 
	 * @param oldWidth
	 * @param oldHeight
	 * @param newWidth
	 * @param newHeight
	 */
	public void verifyDimensionsMatch(double oldWidth, double oldHeight, double newWidth, double newHeight)
	{
		if((oldWidth != newWidth || oldHeight != newHeight) && newWidth != 0 && newHeight != 0 && oldWidth != 0 && oldHeight != 0)
		{
			origin.x = (origin.x / oldWidth) * newWidth;
			origin.y = (origin.y / oldHeight) * newHeight;
			
			for(int i = 0; i < 4; i++)
			{
				scaleBoundary.points[i].x = (scaleBoundary.points[i].x / oldWidth) * newWidth;
				scaleBoundary.points[i].y = (scaleBoundary.points[i].y / oldHeight) * newHeight;
				scaleBoundary.leftBoundary.points[i].x = (scaleBoundary.leftBoundary.points[i].x / oldWidth) * newWidth;
				scaleBoundary.leftBoundary.points[i].y = (scaleBoundary.leftBoundary.points[i].y / oldHeight) * newHeight;
				scaleBoundary.rightBoundary.points[i].x = (scaleBoundary.rightBoundary.points[i].x / oldWidth) * newWidth;
				scaleBoundary.rightBoundary.points[i].y = (scaleBoundary.rightBoundary.points[i].y / oldHeight) * newHeight;
			}
			
			for(Point point : options.points)
			{
				point.x = (point.x / oldWidth) * newWidth;
				point.y = (point.y / oldHeight) * newHeight;
			}
		}
	}
}	